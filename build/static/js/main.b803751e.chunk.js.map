{"version":3,"sources":["photos.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","photos","require","Navbar","props","react_default","a","createElement","score","topScore","Game","state","handleClick","event","console","log","_this2","this","_this$state","map","photo","onClick","key","src","concat","height","width","alt","Component","App","App_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yJAiBAA,EAAOC,QAjBQ,CACd,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,6HCXKC,SAASC,EAAQ,KAEvB,SAASC,EAAOC,GACd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,oBAAYH,EAAMI,OAClBH,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMK,iBAO1BC,6MACJC,MAAQ,CACNH,MAAO,EACPC,SAAU,EACVR,YAGFW,YAAc,SAAAC,GACZC,QAAQC,IAAIF,4EAGL,IAAAG,EAAAC,KAAAC,EAC6BD,KAAKN,MAAjCH,EADDU,EACCV,MAAOC,EADRS,EACQT,SAAUR,EADlBiB,EACkBjB,OAEzB,OACEI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACJ,EAAD,CAAQK,MAAOA,EAAOC,SAAUA,IAC/BR,EAAOkB,IAAI,SAAAC,GACV,OACEf,EAAAC,EAAAC,cAAA,OACEc,QAASL,EAAKJ,YACdU,IAAKF,EACLG,IAAG,WAAAC,OAAaJ,GAChBK,OAAO,MACPC,MAAM,MACNC,IAAKP,cAzBAQ,aA0CJC,MARf,WACE,OACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuB,EAAD,QC5CcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b803751e.chunk.js","sourcesContent":["const photos = [\n\t'a.jpg',\n\t'b.jpg',\n\t'c.jpg',\n\t'd.jpg',\n\t'e.jpg',\n\t'f.jpg',\n\t'g.jpg',\n\t'h.jpg',\n\t'i.jpg',\n\t'j.jpg',\n\t'k.jpg',\n\t'l.jpg',\n\t'm.jpg',\n\t'n.jpg',\n]\n\nmodule.exports = photos;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n// import \"../public\";\nconst photos = require(\"./photos\");\n\nfunction Navbar(props) {\n  return (\n    <div>\n      <nav>\n        <h1> Clicky Game</h1>\n        <ul>\n          <li>Score: {props.score}</li>\n          <li>Top Score: {props.topScore}</li>\n        </ul>\n      </nav>\n    </div>\n  );\n}\n\nclass Game extends Component {\n  state = {\n    score: 0,\n    topScore: 0,\n    photos\n  };\n\n  handleClick = event => {\n    console.log(event);\n  };\n\n  render() {\n    const { score, topScore, photos } = this.state;\n\n    return (\n      <div>\n        <Navbar score={score} topScore={topScore} />\n        {photos.map(photo => {\n          return (\n            <img\n              onClick={this.handleClick}\n              key={photo}\n              src={`/assets/${photo}`}\n              height=\"300\"\n              width=\"350\"\n              alt={photo}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}